// ‚úÖ ƒê√£ t·ªëi ∆∞u UI v√† UX v·ªõi Tailwind, cƒÉn ch·ªânh t·ªët h∆°n, gi·ªØ l·∫°i logic g·ªëc.

import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Modal,
  message,
  Card,
  Space,
  Tag,
  Row,
  Col,
  Form,
  Input,
  InputNumber,
  Select,
} from "antd";
import type { ColumnsType } from "antd/es/table";
import {
  EyeOutlined,
  EditOutlined,
  DeleteOutlined,
  UserOutlined,
  PlusOutlined,
} from "@ant-design/icons";

import {
  getRoomList,
  deleteRoom,
  updateRoom,
  createRoom,
} from "../../services/roomServices";
import type { Room } from "../../types/Room";
import { viTriServices } from "../../services/viTriServices";
import type { ViTri } from "../../types/ViTri";

const { Option } = Select;

const RoomManagement: React.FC = () => {
  const [roomList, setRoomList] = useState<Room[]>([]);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null);
  const [locationList, setLocationList] = useState<ViTri[]>([]);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editForm] = Form.useForm();
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [addForm] = Form.useForm();

  const fetchRooms = async () => {
    try {
      const data = await getRoomList();
      setRoomList(data);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch ph√≤ng:", error);
    }
  };

  const fetchLocations = async () => {
    try {
      const res = await viTriServices.getListViTri();
      setLocationList(res.data.content);
    } catch (error) {
      console.error("L·ªói l·∫•y danh s√°ch v·ªã tr√≠:", error);
    }
  };

  useEffect(() => {
    fetchRooms();
    fetchLocations();
  }, []);

  const getLocationNameById = (id: number | string) => {
    const location = locationList.find((item) => item.id === Number(id));
    return location
      ? `${location.tenViTri}, ${location.tinhThanh}, ${location.quocGia}`
      : `#${id}`;
  };

  const handleView = (room: Room) => {
    setSelectedRoom(room);
    setIsViewModalOpen(true);
  };

  const handleEdit = (room: Room) => {
    setSelectedRoom(room);
    editForm.setFieldsValue(room);
    setIsEditModalOpen(true);
  };

  const handleAddRoom = async () => {
    try {
      const values = await addForm.validateFields();
      await createRoom(values);
      message.success("‚úÖ Th√™m ph√≤ng th√†nh c√¥ng!");
      setIsAddModalOpen(false);
      addForm.resetFields();
      fetchRooms();
    } catch (error) {
      message.error("‚ùå Th√™m ph√≤ng th·∫•t b·∫°i!");
    }
  };

  const handleUpdateRoom = async () => {
    try {
      const values = await editForm.validateFields();
      if (selectedRoom) {
        await updateRoom(selectedRoom.id, values);
        message.success("‚úÖ C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng!");
        setIsEditModalOpen(false);
        fetchRooms();
      }
    } catch (error) {
      message.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };

  const handleDelete = async (roomId: number) => {
    Modal.confirm({
      title: "X√°c nh·∫≠n xo√°",
      content: "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ph√≤ng n√†y kh√¥ng?",
      okText: "Xo√°",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: async () => {
        try {
          await deleteRoom(roomId);
          message.success("‚úÖ Xo√° ph√≤ng th√†nh c√¥ng!");
          fetchRooms();
        } catch (error: any) {
          message.error(
            `‚ùå L·ªói khi xo√° ph√≤ng: ${
              error.response?.data?.message || "Kh√¥ng r√µ nguy√™n nh√¢n"
            }`
          );
        }
      },
    });
  };

  const columns: ColumnsType<Room> = [
    { title: "ID", dataIndex: "id", key: "id", width: 80, responsive: ["md"] },
    {
      title: "T√™n ph√≤ng",
      dataIndex: "tenPhong",
      key: "tenPhong",
      render: (text) => <strong className="text-blue-600">{text}</strong>,
    },
    {
      title: "H√¨nh ·∫£nh",
      dataIndex: "hinhAnh",
      key: "hinhAnh",
      render: (url) => (
        <img
          src={url || "/default-room.jpg"}
          alt="H√¨nh ph√≤ng"
          onError={(e) => {
            e.currentTarget.onerror = null;
            e.currentTarget.src = "/default-room.jpg";
          }}
          className="w-20 h-14 object-cover rounded shadow"
        />
      ),
    },
    {
      title: "V·ªã tr√≠",
      dataIndex: "maViTri",
      key: "maViTri",
      render: (maViTri: number | string) => (
        <Tag color="blue">{getLocationNameById(maViTri)}</Tag>
      ),
    },
    {
      title: "Kh√°ch t·ªëi ƒëa",
      dataIndex: "khach",
      key: "khach",
      render: (text) => (
        <Tag icon={<UserOutlined />} color="volcano">
          {text} ng∆∞·ªùi
        </Tag>
      ),
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "actions",
      render: (_, record) => (
        <Space wrap>
          <Button icon={<EyeOutlined />} onClick={() => handleView(record)}>
            Xem
          </Button>
          <Button
            icon={<EditOutlined />}
            type="primary"
            onClick={() => handleEdit(record)}
          >
            S·ª≠a
          </Button>
          <Button
            icon={<DeleteOutlined />}
            danger
            onClick={() => handleDelete(record.id)}
          >
            X√≥a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="px-4 md:px-8 py-6">
      {" "}
      <Button
        icon={<PlusOutlined />}
        type="primary"
        onClick={() => setIsAddModalOpen(true)}
      >
        Th√™m ph√≤ng
      </Button>
      <Card
        title={<span className="text-xl font-semibold">üìã Qu·∫£n l√Ω ph√≤ng</span>}
      >
        <Table
          dataSource={roomList}
          columns={columns}
          rowKey="id"
          pagination={{ pageSize: 6 }}
          bordered
          scroll={{ x: "max-content" }}
        />
      </Card>
      {/* C√°c modal gi·ªØ nguy√™n nh∆∞ c≈© */}
      {/* ... */}
      <Modal
        open={isViewModalOpen}
        title="üìÑ Th√¥ng tin ph√≤ng"
        onCancel={() => setIsViewModalOpen(false)}
        footer={<Button onClick={() => setIsViewModalOpen(false)}>ƒê√≥ng</Button>}
      >
        {selectedRoom && (
          <div className="text-base space-y-2">
            <p>
              <strong>ID:</strong> {selectedRoom.id}
            </p>
            <p>
              <strong>T√™n ph√≤ng:</strong> {selectedRoom.tenPhong}
            </p>
            <p>
              <strong>V·ªã tr√≠:</strong>{" "}
              {getLocationNameById(selectedRoom.maViTri)}
            </p>
            <p>
              <strong>Kh√°ch t·ªëi ƒëa:</strong> {selectedRoom.khach}
            </p>
            <img
              src={selectedRoom.hinhAnh}
              alt="Ph√≤ng"
              className="w-full h-48 object-cover rounded"
            />
          </div>
        )}
      </Modal>
      {/* Modal: S·ª≠a ph√≤ng */}
      <Modal
        open={isEditModalOpen}
        title="‚úèÔ∏è Ch·ªânh s·ª≠a ph√≤ng"
        onCancel={() => setIsEditModalOpen(false)}
        onOk={handleUpdateRoom}
        okText="C·∫≠p nh·∫≠t"
        width={800}
      >
        <Form form={editForm} layout="vertical">
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label="T√™n ph√≤ng"
                name="tenPhong"
                rules={[{ required: true, message: "Nh·∫≠p t√™n ph√≤ng" }]}
              >
                <Input />
              </Form.Item>
              <Form.Item
                label="H√¨nh ·∫£nh"
                name="hinhAnh"
                rules={[{ required: true, message: "Nh·∫≠p URL h√¨nh ·∫£nh" }]}
              >
                <Input />
              </Form.Item>
              <Form.Item
                label="Gi√° ti·ªÅn"
                name="giaTien"
                rules={[{ required: true, message: "Nh·∫≠p gi√° ti·ªÅn" }]}
              >
                <InputNumber min={0} className="w-full" />
              </Form.Item>
              <Form.Item
                label="M√¥ t·∫£"
                name="moTa"
                rules={[{ required: true, message: "Nh·∫≠p m√¥ t·∫£" }]}
              >
                <Input.TextArea rows={3} />
              </Form.Item>
              <Form.Item
                label="V·ªã tr√≠"
                name="maViTri"
                rules={[{ required: true, message: "Ch·ªçn v·ªã tr√≠" }]}
              >
                <Select showSearch placeholder="Ch·ªçn v·ªã tr√≠">
                  {locationList.map((location) => (
                    <Option key={location.id} value={location.id}>
                      {location.tenViTri}, {location.tinhThanh},{" "}
                      {location.quocGia}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>

            <Col span={12}>
              <Form.Item label="S·ªë kh√°ch" name="khach">
                <InputNumber min={1} className="w-full" />
              </Form.Item>
              <Form.Item label="Ph√≤ng ng·ªß" name="phongNgu">
                <InputNumber min={0} className="w-full" />
              </Form.Item>
              <Form.Item label="Gi∆∞·ªùng" name="giuong">
                <InputNumber min={0} className="w-full" />
              </Form.Item>
              <Form.Item label="Ph√≤ng t·∫Øm" name="phongTam">
                <InputNumber min={0} className="w-full" />
              </Form.Item>
            </Col>
          </Row>
        </Form>
      </Modal>
      {/* Modal: Th√™m ph√≤ng */}
      <Modal
        open={isAddModalOpen}
        title="‚ûï Th√™m ph√≤ng m·ªõi"
        onCancel={() => setIsAddModalOpen(false)}
        onOk={handleAddRoom}
        okText="Th√™m"
      >
        <Form form={addForm} layout="vertical">
          <Form.Item
            label="T√™n ph√≤ng"
            name="tenPhong"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n ph√≤ng" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="H√¨nh ·∫£nh"
            name="hinhAnh"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p URL h√¨nh ·∫£nh" }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            label="M√¥ t·∫£"
            name="moTa"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£" }]}
          >
            <Input.TextArea rows={3} />
          </Form.Item>
          <Form.Item
            label="Gi√° ti·ªÅn"
            name="giaTien"
            rules={[{ required: true, message: "Nh·∫≠p gi√° ti·ªÅn" }]}
          >
            <InputNumber min={10000} className="w-full" />
          </Form.Item>
          <Form.Item
            label="S·ªë kh√°ch t·ªëi ƒëa"
            name="khach"
            rules={[{ required: true, message: "Nh·∫≠p s·ªë kh√°ch" }]}
          >
            <InputNumber min={1} className="w-full" />
          </Form.Item>
          <Form.Item label="S·ªë gi∆∞·ªùng" name="giuong">
            <InputNumber min={0} className="w-full" />
          </Form.Item>
          <Form.Item label="S·ªë ph√≤ng t·∫Øm" name="phongTam">
            <InputNumber min={0} className="w-full" />
          </Form.Item>
          <Form.Item label="S·ªë ph√≤ng ng·ªß" name="phongNgu">
            <InputNumber min={0} className="w-full" />
          </Form.Item>

          <Form.Item
            label="V·ªã tr√≠"
            name="maViTri"
            rules={[{ required: true, message: "Ch·ªçn v·ªã tr√≠" }]}
          >
            <Select showSearch placeholder="Ch·ªçn v·ªã tr√≠">
              {locationList.map((location) => (
                <Option key={location.id} value={location.id}>
                  {location.tenViTri}, {location.tinhThanh}, {location.quocGia}
                </Option>
              ))}
            </Select>
          </Form.Item>

          {/* C√°c ti·ªán nghi */}
        </Form>
      </Modal>
    </div>
  );
};

export default RoomManagement;
